---
layout: post
title:  "Ubuntu Installation"
date:   2015-08-03 02:00:00
categories: "ubuntu"
asset_path: /assets/posts/Ubuntu15.04/
tags: ['RVM', 'JAVA', '.bash.rc', 'format', 'my.cnf', 'Atom']

---

<header>
    <img src="{{ page.asset_path }}ubuntu.jpg" class="img-responsive img-rounded img-fluid">
    <div style="text-align:right;"> 
    <small>
    Ubuntu로 주로 개발합니다. 서버, 안드로이드, 인공지능, 분석 기타등등.. 전부다.. 옛날에는 CentOS도 써봤는데.. 너무 불편한게 한두가지가 아니더군요.. Ubuntu가 갑 입니다.
    </small>
    </div>
</header>

# 1. My Personal Ubuntu Installation Guide

## 1.1 Locale Setup

```bash
sudo locale-gen ko_KR.UTF-8
```

## 1.2 32bit Libraries (Optional)
GTX960 Driver를 설치하기전, 32bit 라이브러리를 설치해줍니다. <br>
해당 라이브러리는 또한 Android Studio사용시 설치 가능하게 해줍니다. 

```bash
sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 lib32z1-dev
```


## 1.3 Java 

**Default JDK**

```bash
$ sudo apt install default-jdk
```



**Oracle Java**

```bash
sudo add-apt-repository ppa:linuxuprising/java
sudo apt-get update
sudo apt-get install oracle-java13-installer
```

## 1.4 CapsLock <->  한글키 변경 (Optional)

xev 를 통해서 키를 눌러보면서 keycode 그리고 키 이름을 알 수 있습니다.<br>
개인 키보드는 다음과 같습니다.

 - capslock: keycode 66 (keysym 0xffe5, Caps_Lock)
 - 한영: keycode 108 (keysym 0xff31, Hangul)

CapsLock 그리고 한영키를 서로 바꾸려면 다음과 같이 합니다.

```bash
xmodmap -e "keycode 66 = Hangul"
xmodmap -e "keycode 108 = Caps_Lock"
```


## 1.5 벼루 (Optional)

**한글 104키**로 해야 함

```bash
sudo apt-get install uim uim-byeoru
uim-pref-gtk
```

## 1.6 Libraries 

```bash
# Sound Equalizer
sudo apt install pulseeffects  # Sound Equalizer for Ubuntu 20.04
sudo apt install -y lsp-plugins

# Pillow Ubuntu Libraries 
sudo apt-get install libtiff5-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk

### Ruby Image Libraries (Optional)
sudo apt-get install optipng pngquant gifsicle pngcrush advancecomp pngnq jhead jpegoptim
```



## 1.7 Command Prompt 설정 (Optional)

.bashrc 파일에 추가
*하둡, CUDA, Android, Java, Spark설정 모두 들어가있기 때문에 따로 설정 필요합니다.*

```bash
# Pretty Visualization
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'

}
export PS1='\[\033[00;36m\]\u:\[\033[0;33m\]\W$(parse_git_branch)>\[\033[00m\]'
# Hostname Version
# export PS1='\[\033[00;36m\]$(hostname) \u:\[\033[0;33m\]\W$(parse_git_branch)>\[\033[00m\]'

# Java
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/

# CUDA
export CUDAHOME=/usr/local/cuda
export PATH=$PATH:$CUDAHOME/bin
export LD_LIBRARY_PATH=$CUDAHOME/lib64:/lib
```

## 1.8 Increase Watch Limit

/etc/sysctl.conf 파일에다가 다음을 추가합니다.<br>
[watches-limlit][watches-limlit]

```bash
fs.inotify.max_user_watches = 524288
```


```bash
sudo sysctl -p
```

## 1.9 개발자 폰트 설치

나눔고딕 그리고 D2Coding 을 설치합니다. 

```bash
wget http://cdn.naver.com/naver/NanumFont/fontfiles/NanumFont_TTF_ALL.zip
unzip NanumFont_TTF_ALL.zip

wget https://github.com/naver/d2codingfont/releases/download/VER1.3.2/D2Coding-Ver1.3.2-20180524.zip
unzip D2Coding-Ver1.3.2-20180524.zip
```



# 2. Optional Installation

## 2.1 Concky

<img src="{{ page.asset_path }}conky-image.png" class="img-responsive img-rounded img-fluid center" style="border: 2px solid #333333">

```bash
$ sudo apt install conky-all
$ vi ~/.conkyrc
```

```yaml
conky.config = {
	
	update_interval = 1,
	cpu_avg_samples = 2,
	net_avg_samples = 2,
	out_to_console = false,
	override_utf8_locale = true,
	double_buffer = true,
	no_buffers = true,
	text_buffer_size = 32768,
	imlib_cache_size = 0,
	own_window = true,
	own_window_type = 'normal',
	own_window_argb_visual = true,
	own_window_argb_value = 50,
	own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',
	border_inner_margin = 5,
	border_outer_margin = 0,
	xinerama_head = 1,
	alignment = 'bottom_right',
	gap_x = 0,
	gap_y = 33,
	draw_shades = false,
	draw_outline = false,
	draw_borders = false,
	draw_graph_borders = false,
	use_xft = true,
	font = 'Ubuntu Mono:size=12',
	xftalpha = 0.8,
	uppercase = false,
	default_color = 'white',
	own_window_colour = '#000000',
	minimum_width = 300, minimum_height = 0,
	alignment = 'top_right',

};
conky.text = [[
${time %H:%M:%S}${alignr}${time %Y-%m-%d}
${voffset -16}${font sans-serif:bold:size=18}${alignc}${time %H:%M}${font}
${font}${voffset -4}
${font sans-serif:bold:size=10}SYSTEM ${hr 2}
${font sans-serif:normal:size=8}$sysname $kernel $alignr $machine
Host:$alignr$nodename
Uptime:$alignr$uptime
File System: $alignr${fs_type}
Processes: $alignr ${execi 1000 ps aux | wc -l}

${font sans-serif:bold:size=10}CPU ${hr 2}
${font sans-serif:normal:size=8}${execi 1000 grep model /proc/cpuinfo | cut -d : -f2 | tail -1 | sed 's/\s//'}
${font sans-serif:normal:size=8}${cpugraph cpu1}
CPU01: ${cpu cpu1}% ${cpubar cpu1}
CPU02: ${cpu cpu2}% ${cpubar cpu2}
CPU03: ${cpu cpu3}% ${cpubar cpu3}
CPU04: ${cpu cpu4}% ${cpubar cpu4}
CPU05: ${cpu cpu5}% ${cpubar cpu5}
CPU06: ${cpu cpu6}% ${cpubar cpu6}
CPU07: ${cpu cpu7}% ${cpubar cpu7}
CPU08: ${cpu cpu8}% ${cpubar cpu8}
CPU09: ${cpu cpu9}% ${cpubar cpu9}
CPU10: ${cpu cpu10}% ${cpubar cpu10}
CPU11: ${cpu cpu11}% ${cpubar cpu11}
CPU12: ${cpu cpu12}% ${cpubar cpu12}
CPU13: ${cpu cpu13}% ${cpubar cpu13}
CPU14: ${cpu cpu14}% ${cpubar cpu14}
CPU15: ${cpu cpu15}% ${cpubar cpu15}
CPU16: ${cpu cpu16}% ${cpubar cpu16}
CPU17: ${cpu cpu17}% ${cpubar cpu17}
CPU18: ${cpu cpu18}% ${cpubar cpu18}



${font sans-serif:bold:size=10}Nvidia ${hr 2}
${font sans-serif:normal:size=8}
GPU Frequency: $alignr ${nvidia gpufreq} Mhz
Temperature:   $alignr ${nvidia temp} Degree

${font sans-serif:bold:size=10}MEMORY ${hr 2}
${font sans-serif:normal:size=8}RAM $alignc $mem / $memmax $alignr $memperc%
$membar
SWAP $alignc ${swap} / ${swapmax} $alignr ${swapperc}%
${swapbar}

${font sans-serif:bold:size=10}DISK USAGE ${hr 2}
${font sans-serif:normal:size=8}/ $alignc ${fs_used /} / ${fs_size /} $alignr ${fs_used_perc /}%
${fs_bar /}

${font Ubuntu:bold:size=10}NETWORK ${hr 2}
${font sans-serif:normal:size=8}Local IPs:${alignr}External IP:
${execi 1000 ip a | grep inet | grep -vw lo | grep -v inet6 | cut -d \/ -f1 | sed 's/[^0-9\.]*//g'}  ${alignr}${execi 1000  wget -q -O- http://ipecho.net/plain; echo}
${font sans-serif:normal:size=8}Down: ${downspeed enp0s3}  ${alignr}Up: ${upspeed enp0s3} 
${color lightgray}${downspeedgraph enp0s3 80,130 } ${alignr}${upspeedgraph enp0s3 80,130 }$color
${font sans-serif:bold:size=10}TOP PROCESSES ${hr 2}
${font sans-serif:normal:size=8}Name $alignr PID   CPU%   MEM%${font sans-serif:normal:size=8}
${top name 1} $alignr ${top pid 1} ${top cpu 1}% ${top mem 1}%
${top name 2} $alignr ${top pid 2} ${top cpu 2}% ${top mem 2}%
${top name 3} $alignr ${top pid 3} ${top cpu 3}% ${top mem 3}%
${top name 4} $alignr ${top pid 4} ${top cpu 4}% ${top mem 4}%
${top name 5} $alignr ${top pid 5} ${top cpu 5}% ${top mem 5}%
${top name 6} $alignr ${top pid 6} ${top cpu 6}% ${top mem 6}%
${top name 7} $alignr ${top pid 7} ${top cpu 7}% ${top mem 7}%
${top name 8} $alignr ${top pid 8} ${top cpu 8}% ${top mem 8}%
${top name 9} $alignr ${top pid 9} ${top cpu 9}% ${top mem 9}%
${top name 10} $alignr ${top pid 10} ${top cpu 10}% ${top mem 10}%
]];
```




## 2.2 Gradle 

~/.gradle/gradle.properties 에 다음을 추가시켜줍니다.
 
 
```bash
org.gradle.jvmargs=-Xmx12G -Xms6G
org.gradle.daemon=true
org.gradle.parallel=true
org.gradle.configureondemand=true
org.gradle.caching=true
org.gradle.upToDateChecks.enabled=true
```


## 2.3 Postgres

설치..
```bash
sudo apt-get install postgresql-client
sudo apt-get install postgresql postgresql-contrib
apt-cache search postgres
```

postgres 패스워드 변경
```bash
sudo -u postgres psql postgres
\password postgres
```

peer -> md5 로 고친다.

```bash
sudo vi /etc/postgresql/9.4/main/pg_hba.conf
local   all             postgres                                md5
local   all             all                                     md5
sudo service postgresql restart
```

## 2.4 MySQL

```bash
sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf

[mysqld_safe]
default-character-set=utf8

[mysqld]
collation-server = utf8_unicode_ci
init-connect='SET NAMES utf8'
character-set-server = utf8
```

## 2.5 Oracle Client

먼저 [oracle-client]를 다운받습니다. 

* oracle-instantclinet-basic-.rpm
* oracle-instantclinet-devel-.rpm
* oracle-instantclinet-sqlplus-.rpm

```bash
sudo apt-get install alien
sudo apt-get install libaio1
sudo alien -i oracle-*

```


[c.sublime]: {{ page.asset_path }}c.sublime-build
[watches-limlit]: https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit
[oracle-client]: http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html
[Installing SBT on Linux]: http://www.scala-sbt.org/0.13/docs/Installing-sbt-on-Linux.html


## 2.6 Postman Shortcut

Postman Linux 버젼을 설치후, `~/.local/share/applications/postman.desktop` 에 파일을 만들고 다음을 넣습니다. <br>
Exec, Icon 은 설치된 Postman의 위치를 설정하면 됩니다.

```bash
[Desktop Entry]
Encoding=UTF-8
Version=1.0
Name=Postman
Comment=Postman Native App
Exec=/home/anderson/apps/Postman/Postman — %u
Icon=/home/anderson/apps/Postman/app/resources/app/assets/icon.png
Terminal=false
StartupWMClass=postman
Type=Application
Categories=Network;
MimeType=x-scheme-handler/tg;
X-Desktop-File-Install-Version=0.22
```