---
layout: post
title:  "Ext.js 6 Tutorial"
date:   2016-09-26 01:00:00
categories: "aws"
asset_path: /assets/posts2/Ext.js/
tags: ['Sencha']

---

<header>
    <img src="{{ page.asset_path }}rainbow-11.jpg" class="img-responsive img-rounded" style="width:100%">
    <div style="text-align:right;"> 
    <small>요즘 즐겨하는 게임 Rainbow 6 Siege. 꼭 한번 해보세요. 개 쩔 음  ㄹ ㅇ.        
    </small>
    </div>
</header>

# Core Concepts

### Class System

{% highlight javascript %}
Ext.define('Anderson.view.main.Anderson', {
    name: 'Unknown',

    constructor: function (config) {
        this.initConfig(config.config);
        this.name = config.name;
    },

    config: {
        at: 'home'
    },

    applyAt: function (at) {
        if (!Ext.isString(at) || at.length == 0) {
            return this.getAt();
        }
        return at;
    },

    eat: function (foodType) {
        console.log(this.name + " is drinking " + foodType + " at " + this.getAt());
    }
});

var bob = Ext.create('Anderson.view.main.Anderson', {
    name: 'Anderson',
    config: {
        at: 'company'
    }
});
bob.eat("your brain");
{% endhighlight %}

{% highlight javascript %}
Anderson is drinking your brain at company
{% endhighlight %}

**Ext.define** <small>class declaration</small><br>
클래스를 선언합니다. 사용은 Ext.create 를 사용합니다.

**constructor** <br>
Ext.create('클래스 이름', constructure함수에 들어가는 arguments)

**config & apply** <small>클래스가 생성되기 전에 configuration을 생성가능 </small><br>
 - getter, setter가 자동 생성됨 (this.getAt() 또는 this.setAt('something') 처럼 사용가능)<br>
 - apply함수 (applyAt function)을 통해서 setter를 호출시 (setAt) apply를 통해서 설정이 됩니다.<br>
 - 인스턴스 생성시마다 다른 configuration을 설정 가능 (즉 config는 인스턴스 맴버. not static member)

**this.initConfig()** <small>manually initialize configuration</small><br>
초기화를 manually 실행시킵니다.

### Containers 

Ext.JS는 Components들로 구성되어 있으며, Container는 다른 components들을 포함하고 있을수 있는 special type of component입니다.<br>
가장 윗쪽으로는 viewport (root)가 있으며, 그 안으로 comtainers (예를 들어서 Panel)가 다른 components (Text, Button, etc)들을 포함하고 있습니다.

<img src="{{ page.asset_path }}component_heirarchy.png" class="img-responsive img-rounded">


{% highlight javascript %}
Ext.define('Anderson.view.main.Tutorial', {
    extend: 'Ext.panel.Panel',
    renderTo: Ext.getBody(),
    title: 'Anderson Jo Panel',
    layout: 'column',
    width: 400,
    height: 200,
    items: [{
        xtype: 'panel',
        title: 'Child Panel 1',
        height: 100,
        columnWidth: 0.5,
    }, {
        xtype: 'panel',
        title: 'Child Panel 2',
        height: 100,
        columnWidth: 0.5
    }]
});
{% endhighlight %}

<img src="{{ page.asset_path }}container_example1.png" class="img-responsive img-rounded">

모든 Container는 layout을 갖고 있습니다. layout을 통해서 child components의 위치와 크기를 관리 할 수 있습니다.<br>
내부적으로 Framework는 **updateLayout()** 함수를 사용합니다. 아래의 예제처럼 items를 미리 명시하는것이 아니라, dynamically add를 할 수 있는데, 
이때 추가할때마다 updateLayout()을 호출하게 되고 performance에 영향을 미치게 됩니다. 이경우 **suspendLayout** 을 false로 잡고 bulk update 
가 끝난후 **updateLayout()** 함수를 호출하여 layout을 재정렬 할 수 있습니다.

{% highlight javascript %}
Ext.define('Anderson.view.main.Tutorial', {
    ...
    suspendLayout: true
});
{% endhighlight %}

{% highlight javascript %}
tutorial.add({
    xtype: 'panel',
    title: 'Dynamic 1',
    height: 100,
    columnWidth: 0.5
});

tutorial.add({
    xtype: 'panel',
    title: 'Dynamic 2',
    height: 100,
    columnWidth: 0.5
});

tutorial.suspendLayout = false;
tutorial.updateLayout();
{% endhighlight %}

<img src="{{ page.asset_path }}container_example2.png" class="img-responsive img-rounded">


### Viewport

{% highlight javascript %}
var childPanel1 = Ext.create('Ext.panel.Panel', {
    title: 'Child Panel 1',
    html: 'A Panel'
});

var childPanel2 = Ext.create('Ext.panel.Panel', {
    title: 'Child Panel 2',
    html: 'Another Panel'
});

Ext.create('Ext.container.Viewport', {
    items: [childPanel1, childPanel2]
});
{% endhighlight %}

<img src="{{ page.asset_path }}viewport.png" class="img-responsive img-rounded">

* viewport에서 출력시 화면 전체를 채우게 됩니다.


### Custom View Components (Inheritance)

새로운 UI Class를 만들려고 할때, **Ext.Component**로 부터 extend하던지, instance를 갖고 있어야 합니다.<br>
render() 함수는 component에 정의되어 있고, 이것을 사용하는 것은 container's layout manager에서 호출합니다. <br>
따라서 render()함수를 override하거나 집접 호출하는 방식으로 하면 안되며, **onRender()**함수를 통하여 확장하게 됩니다.


<img src="{{ page.asset_path }}template_pattern.png" class="img-responsive img-rounded">

 
{% highlight javascript %}
Ext.define('Anderson.view.main.Tutorial', {
    extend: 'Ext.Component',
    onRender: function () {
        this.callParent(arguments);
        // perform additional rendering tasks here.
    }
});
{% endhighlight %}


### Data Package 

**Ext.daata.Model**

| Part of Model | Values |
|:--------------|:-------|
| Proxy         | AJAX, Rest, LocalStorage, JSON-P |
| Fields        | String, Integer, Float, Boolean  |
| Associations  | ManyToOne, OneToOne, ManyToMany  |
| Validations   | Presence, Format, Length, Custom |

**/app/model/User.js**

{% highlight javascript %}
Ext.define("Anderson.model.Base", {
    extend: 'Ext.data.Model',
    fields: [{name: 'id', type: 'int'}],

    schema: {
        namespace: 'Anderson.model',
        proxy: {
            type: 'ajax',
            url: '/resources/user.json',
            reader: {
                type: 'json',
                rootProperty: '{entityName:lowercase}'
            }
        }
    },
});

Ext.define('Anderson.model.User', {
    extend: 'Anderson.model.Base',
    fields: [{name: 'title', type: 'string'}]
});

Ext.define('Anderson.model.Book', {
    extend: 'Anderson.model.Base',
    fields: [
        {name: 'user_id', reference: 'User', type: 'int'},
        {name: 'title', type: 'string'}]
});
{% endhighlight %}

| Name | Description |
|:-----|:------------|
| Client Proxy | [Memory][Client Proxy Memory], [Local Storage][Client Proxy Local Storage] 2종류가 있으며, Model data를 불러오거나 저장하는데 사용되며, <br>Local Storage의 경우에는 HTML5 를 지원하지 않는 old browser에서는 작동하지 않습니다. |
| Server Proxy | [Ajax][Server Proxy Ajax], [JSONP][Server Proxy JsonP],  [Rest][Server Proxy REST] 등이 사용됩니다.|


schema란 a collection of entities로서, schema를 명시시에, 해당 스키마로부터 파생된 Model들은 Anderson.model.User로부터 inherit받습니다.<br>
**namespace** 는 Models사이에 associations을 정의할때 사용됩니다.

[Client Proxy Memory]: http://docs.sencha.com/extjs/6.2.0/classic/Ext.data.proxy.Memory.html
[Client Proxy Local Storage]: http://docs.sencha.com/extjs/6.2.0/classic/Ext.data.proxy.LocalStorage.html
[Server Proxy Ajax]: http://docs.sencha.com/extjs/6.2.0/classic/Ext.data.proxy.Ajax.html
[Server Proxy JsonP]: http://docs.sencha.com/extjs/6.2.0/classic/Ext.data.proxy.JsonP.html
[Server Proxy REST]: http://docs.sencha.com/extjs/6.2.0/classic/Ext.data.proxy.Rest.html

**/resources/user.json**

{% highlight json %}
{
  "success": "true",
  "user": [
    {
      "id": 1,
      "name": "Philip J. Fry"
    },
    {
      "id": 2,
      "name": "Hubert Farnsworth"
    },
    {
      "id": 3,
      "name": "Turanga Leela"
    },
    {
      "id": 4,
      "name": "Amy Wong"
    }
  ]
}
{% endhighlight %}

**AJAX로 불러오기**

{% highlight javascript %}
var store = new Ext.data.Store({
    model: 'Anderson.model.User'
});
console.log('entityName:', store.model.entityName);

store.load({
    callback: function () {
        var items = this.getData().items;
        var first_name = this.first().get('name');
        items.forEach(function (item, i, data) {
            console.log(item.data.id, item.data.name, item.data.title);
        });

        console.log('First Name:', first_name);
    }
})
{% endhighlight %}

결과

{% highlight bash %}
entityName: User
1 "Philip J. Fry" ""
2 "Hubert Farnsworth" ""
3 "Turanga Leela" ""
4 "Amy Wong" ""
First Name: Philip J. Fry
{% endhighlight %}


**Reference**

1번 유저를 불러와서, books를 등록시키는것

{% highlight javascript %}
Anderson.model.User.load(1, {
    callback: function (user) {
        console.log('User: ' + user.get('name'));

        // book 추가
        user.books().add({user_id: user.id, title: '해리포터'});
        user.books().add({user_id: user.id, title: '출근하는데 집에 가고 싶다.'});
        user.books().sync();

        user.books(function (posts) {
            posts.each(function (post) {
                console.log('Book: ' + post.get('title'));
            });
        });
    }
});
{% endhighlight %}

{% highlight bash %}
User: Philip J. Fry
Book: 해리포터
Book: 출근하는데 집에 가고 싶다.
{% endhighlight %}

# Login System Tutorial

### Generate Sencha Application

Sencha Ext.js app을 만들고 서버를 실행시킵니다.<br>
[http://localhost:1841][http://localhost:1841] 로 접속 

{% highlight bash %}
sencha -sdk /home/anderson/apps/ext-6.0.2 generate app Test ./test
cd ./test
sencha app  watch
{% endhighlight %}

### Login View

app -> view -> login 디렉토리 생성 -> 파일 생성

{% highlight text %}
app
├── Application.js
└── view
    ├── login
    │   ├── LoginController.js
    │   └── Login.js
    └── main
        ├── MainController.js
        └── MainModel.js
{% endhighlight %}

app.js 파일의 코드를 보면.. mainview가 있는데.. 해당 컴포넌트를 자동으로 불러와서 초기화 합니다.<br>
데스크탑에서 mainview는 classic/src/view/main/Main.js를 가르킵니다.

{% highlight javascript %}
mainView: 'MyApp.view.main.Main'
{% endhighlight %}

app.view.login.Login.js 파일에 다음과 같이 코딩합니다.<br>
**xtype** 은 일종의 class에서 instantiated한 instance라고 생각하시면 됩니다.

{% highlight javascript %}
Ext.define('Anderson.view.login.Login', {
    extend: 'Ext.window.Window',
    xtype: 'login',

    requires: [
        'Anderson.view.login.LoginController',
        'Ext.form.Panel'
    ],

    controller: 'login',
    bodyPadding: 10,
    title: 'Login Window',
    closable: false,
    autoShow: true,

    items: {
        xtype: 'form',
        reference: 'form',
        items: [{
            xtype: 'textfield',
            name: 'username',
            fieldLabel: 'Username',
            allowBlank: false
        }, {
            xtype: 'textfield',
            name: 'password',
            inputType: 'password',
            fieldLabel: 'Password',
            allowBlank: false
        }, {
            xtype: 'displayfield',
            hideEmptyLabel: false,
            value: 'Enter any non-blank password'
        }],
        buttons: [{
            text: 'Login',
            formBind: true,
            listeners: {
                click: 'onLoginClick'
            }
        }]
    }
});
{% endhighlight %}

| Name | Description |
|:-----|:------------|
| xtype | 일종의 class에서 instantiate를 하는 shortcut이라고 생각하면 됨 -> 즉 instance 생성 shortcut |
| requires | instance (xtype)을 만들기전 필요한 dependencies를 가져옵니다. |
| controller | 'login'이라는 Controller instance (xtype으로 나온) 를 Login Window view와 연결시킵니다. |

다음과 같이 생성이 됩니다.

<img src="{{ page.asset_path }}ext-login-view.png" class="img-responsive img-rounded">

### Login Controller

{% highlight javascript %}
Ext.define('Anderson.view.login.LoginController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.login',

    onLoginClick: function () {

        // This would be the ideal location to verify the user's credentials via
        // a server-side lookup. We'll just move forward for the sake of this example.

        // Set the localStorage value to true
        localStorage.setItem("TutorialLoggedIn", true);

        // Remove Login Window
        this.getView().destroy();

        // Add the main view to the viewport
        Ext.create({
            xtype: 'app-main'
        });

    }
});
{% endhighlight %}

### Application.js

app.js 안에 있는 mainView: 'Anderson.view.main.Main' 이 부분은 comment out시켜버립니다.<br>
mainview를 이용해서 view를 연결할수도 있지만 (편하게), Application.js에서 launch실행시에 view를 연결시킬수도 있습니다.

{% highlight javascript %}
Ext.define('Anderson.Application', {
    extend: 'Ext.app.Application',
    name: 'Anderson',
    stores: [],
    
    views: [
        'login.Login',
        'main.Anderson'
    ],

    launch: function () {
        var loggedIn;
        loggedIn = localStorage.getItem("TutorialLoggedIn");

        Ext.create({
            xtype: loggedIn ? 'app-main' : 'login'
        });
    },

    onAppUpdate: function () {
        Ext.Msg.confirm('Application Update', 'This application has an update, reload?',
            function (choice) {
                if (choice === 'yes') {
                    window.location.reload();
                }
            }
        );
    }
});
{% endhighlight %}


# Errors 

###  C2008: Requirement had no matching files (Ext.fx.target.Element) 

무슨 이유에서인지는 모르겠지만.. Ext.fx.target.Element 클래스가 없던 경우였고, 
해결방법는 upgrade를 함으로서 .sencha 디렉토리에 있는 내용들, 빠진 클래스 파일들을 추가시켜주었습니다.

{% highlight bash %}
sencha app upgrade /home/anderson/apps/ext-6.0.2
{% endhighlight %}

[http://localhost:1841]: http://localhost:1841