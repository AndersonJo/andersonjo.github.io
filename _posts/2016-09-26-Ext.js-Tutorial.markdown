---
layout: post
title:  "Ext.js 6 Tutorial"
date:   2016-09-26 01:00:00
categories: "aws"
asset_path: /assets/posts2/Ext.js/
tags: ['Sencha']

---

<header>
    <img src="{{ page.asset_path }}rainbow-11.jpg" class="img-responsive img-rounded" style="width:100%">
    <div style="text-align:right;"> 
    <small>요즘 즐겨하는 게임 Rainbow 6 Siege. 꼭 한번 해보세요. 개 쩔 음  ㄹ ㅇ. ㅇ ㅈ        
    </small>
    </div>
</header>

# Core Concepts

### Class System

{% highlight javascript %}
Ext.define('Anderson.view.main.Anderson', {
    name: 'Unknown',

    constructor: function (config) {
        this.initConfig(config.config);
        this.name = config.name;
    },

    config: {
        at: 'home'
    },

    applyAt: function (at) {
        if (!Ext.isString(at) || at.length == 0) {
            return this.getAt();
        }
        return at;
    },

    eat: function (foodType) {
        console.log(this.name + " is drinking " + foodType + " at " + this.getAt());
    }
});

var bob = Ext.create('Anderson.view.main.Anderson', {
    name: 'Anderson',
    config: {
        at: 'company'
    }
});
bob.eat("your brain");
{% endhighlight %}

{% highlight javascript %}
Anderson is drinking your brain at company
{% endhighlight %}

**Ext.define** <small>class declaration</small><br>
클래스를 선언합니다. 사용은 Ext.create 를 사용합니다.

**constructor** <br>
Ext.create('클래스 이름', constructure함수에 들어가는 arguments)

**config & apply** <small>클래스가 생성되기 전에 configuration을 생성가능 </small><br>
 - getter, setter가 자동 생성됨 (this.getAt() 또는 this.setAt('something') 처럼 사용가능)<br>
 - apply함수 (applyAt function)을 통해서 setter를 호출시 (setAt) apply를 통해서 설정이 됩니다.<br>
 - 인스턴스 생성시마다 다른 configuration을 설정 가능 (즉 config는 인스턴스 맴버. not static member)

**this.initConfig()** <small>manually initialize configuration</small><br>
초기화를 manually 실행시킵니다.


# Login System Tutorial

### Generate Sencha Application

Sencha Ext.js app을 만들고 서버를 실행시킵니다.<br>
[http://localhost:1841][http://localhost:1841] 로 접속 

{% highlight bash %}
sencha -sdk /home/anderson/apps/ext-6.0.2 generate app Test ./test
cd ./test
sencha app  watch
{% endhighlight %}

### Login View

app -> view -> login 디렉토리 생성 -> 파일 생성

{% highlight text %}
app
├── Application.js
└── view
    ├── login
    │   ├── LoginController.js
    │   └── Login.js
    └── main
        ├── MainController.js
        └── MainModel.js
{% endhighlight %}

app.js 파일의 코드를 보면.. mainview가 있는데.. 해당 컴포넌트를 자동으로 불러와서 초기화 합니다.<br>
데스크탑에서 mainview는 classic/src/view/main/Main.js를 가르킵니다.

{% highlight javascript %}
mainView: 'MyApp.view.main.Main'
{% endhighlight %}

app.view.login.Login.js 파일에 다음과 같이 코딩합니다.<br>
**xtype** 은 일종의 class에서 instantiated한 instance라고 생각하시면 됩니다.

{% highlight javascript %}
Ext.define('Anderson.view.login.Login', {
    extend: 'Ext.window.Window',
    xtype: 'login',

    requires: [
        'Anderson.view.login.LoginController',
        'Ext.form.Panel'
    ],

    controller: 'login',
    bodyPadding: 10,
    title: 'Login Window',
    closable: false,
    autoShow: true,

    items: {
        xtype: 'form',
        reference: 'form',
        items: [{
            xtype: 'textfield',
            name: 'username',
            fieldLabel: 'Username',
            allowBlank: false
        }, {
            xtype: 'textfield',
            name: 'password',
            inputType: 'password',
            fieldLabel: 'Password',
            allowBlank: false
        }, {
            xtype: 'displayfield',
            hideEmptyLabel: false,
            value: 'Enter any non-blank password'
        }],
        buttons: [{
            text: 'Login',
            formBind: true,
            listeners: {
                click: 'onLoginClick'
            }
        }]
    }
});
{% endhighlight %}

| Name | Description |
|:-----|:------------|
| xtype | 일종의 class에서 instantiate를 하는 shortcut이라고 생각하면 됨 -> 즉 instance 생성 shortcut |
| requires | instance (xtype)을 만들기전 필요한 dependencies를 가져옵니다. |
| controller | 'login'이라는 Controller instance (xtype으로 나온) 를 Login Window view와 연결시킵니다. |

다음과 같이 생성이 됩니다.

<img src="{{ page.asset_path }}ext-login-view.png" class="img-responsive img-rounded">

### Login Controller

{% highlight javascript %}
Ext.define('Anderson.view.login.LoginController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.login',

    onLoginClick: function () {

        // This would be the ideal location to verify the user's credentials via
        // a server-side lookup. We'll just move forward for the sake of this example.

        // Set the localStorage value to true
        localStorage.setItem("TutorialLoggedIn", true);

        // Remove Login Window
        this.getView().destroy();

        // Add the main view to the viewport
        Ext.create({
            xtype: 'app-main'
        });

    }
});
{% endhighlight %}

### Application.js

app.js 안에 있는 mainView: 'Anderson.view.main.Main' 이 부분은 comment out시켜버립니다.<br>
mainview를 이용해서 view를 연결할수도 있지만 (편하게), Application.js에서 launch실행시에 view를 연결시킬수도 있습니다.

{% highlight javascript %}
Ext.define('Anderson.Application', {
    extend: 'Ext.app.Application',
    name: 'Anderson',
    stores: [],
    
    views: [
        'login.Login',
        'main.Anderson'
    ],

    launch: function () {
        var loggedIn;
        loggedIn = localStorage.getItem("TutorialLoggedIn");

        Ext.create({
            xtype: loggedIn ? 'app-main' : 'login'
        });
    },

    onAppUpdate: function () {
        Ext.Msg.confirm('Application Update', 'This application has an update, reload?',
            function (choice) {
                if (choice === 'yes') {
                    window.location.reload();
                }
            }
        );
    }
});
{% endhighlight %}

[http://localhost:1841]: http://localhost:1841