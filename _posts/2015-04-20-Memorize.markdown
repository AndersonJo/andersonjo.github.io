---
layout: post
title:  "Things to Memorize"
date:   2015-04-20 01:00:00
categories: "java"
static: /assets/posts/Memorize/
tags: []

---

<img src="{{ page.static }}notebook.jpeg" class="img-responsive img-rounded">

# Matrix

### Transpose

다음의 Matrix 를 transpose하면 다음과 같이 변형이 됩니다.

{% highlight python %}
# Original Matrix
[[1, 5],
 [2, 6],
 [3, 7],
 [4, 8]]
 
# Transposed Matrix
[[1, 2, 3, 4], 
 [5, 6, 7, 8]]
{% endhighlight %}


Python

{% highlight python %}
def transpose(matrix):
    return [arr for arr in zip(*matrix)]
{% endhighlight %}

Java - 자바에서는 N * N만 된다 (즉 2 * 4 matrix같은것은 안된다.)

{% highlight java %}
int[][] transpose(int[][] matrix) {
    for (int i = 0; i < matrix.length; i++) {
        for (int j = i; j < matrix[0].length; j++) {
            int temp = matrix[j][i];
            matrix[j][i] = matrix[i][j];
            matrix[i][j] = temp;
        }
    }
    return matrix;
}
{% endhighlight %}

### Rotate

python

{% highlight python %}
def rotate(matrix, direction=-1):
    if direction == -1:
        return zip(*matrix[::-1])
    return zip(*matrix)[::-1]
{% endhighlight %}

Java

{% highlight java %}
int[][] rotateMatrix(int[][] matrix) {
    transpose(matrix);

    for (int i = 0, j = matrix.length - 1; i < j; i++, j--) {
        for (int k = 0; k < matrix.length; k++) {
            int temp = matrix[k][i];
            matrix[k][i] = matrix[k][j];
            matrix[k][j] = temp;

        }
    }
    return matrix;
}
{% endhighlight %}


### Multiplication

python

{% highlight python %}
def matrix_multiply(m1, m2):
    r = []
    for i in range(len(m1)):
        r.append([0 for l in range(len(m1))])
        for j in range(len(m1)):
            for k in range(len(m1[j])):
                r[i][j] += m1[i][k] * m2[k][j]
    return r
{% endhighlight %}

# Stack

### Min Max Stack

Java 

{% highlight java %}
public static class MinMaxStack {

    private StackNode _node; // Top Node

    public void push(int value) {
        StackNode node = new StackNode(value, this._node);
        this._node = node;
    }

    public int pop() {
        int value = this._node.value;
        this._node = this._node.prevNode;
        return value;
    }

    public int peek(){
        return this._node.value;
    }

    public int min() {
        return this._node.min;
    }

    public int max() {
        return this._node.max;
    }
}

public static class StackNode {

    public int value;
    public int max = 0;
    public int min = 0;

    public StackNode prevNode;

    public StackNode(int value, StackNode previousNode) {
        this.value = value;
        this.prevNode = previousNode;

        // Set Min Max
        if (prevNode == null) {
            this.min = value;
            this.max = value;
        } else {
            this.min = prevNode.min < value ? prevNode.min : value;
            this.max = prevNode.max > value ? prevNode.max : value;
        }


    }
}

{% endhighlight %}

# Algorithms

### Anagram

Python

{% highlight python %}
def anagram(s1, s2):
    s1 = s1.lower()
    s2 = s2.lower()

    check = list(s2)
    correct = True
    for c in s1:
        pos = 0
        found = False
        for i in range(len(s2)):
            if c == check[i]:
                found = True
                pos = i
        if found:
            check[pos] = None
        else:
            correct = False
    return correct
{% endhighlight %}

Java 

{% highlight java %}
boolean doEasyAnagram(String str1, String str2) {
    char[] chars1 = str1.toCharArray();
    char[] chars2 = str2.toCharArray();

    Arrays.sort(chars1);
    Arrays.sort(chars2);

    str1 = new String(chars1);
    str2 = new String(chars2);
    return str1.equals(str2);
}

boolean doHardAnagram(String str1, String str2) {
    // Both of strings should be the same size
    if (str1.length() != str2.length()) return false;

    short[] letters = new short[256];
    for (int i = 0; i < str1.length(); i++) {
        char c = str1.charAt(i);
        letters[c] += 1;
    }

    for (int i = 0; i < str2.length(); i++) {
        char c = str2.charAt(i);
        if (letters[c] == 0) return false;
        letters[c] -= 1;
    }

    for (int i = 0; i < letters.length; i++) {
        if (letters[i] != 0) return false;
    }

    return true;
}
{% endhighlight %}


# Search


### Binary Search

Python (Java또한 유사하게 문제를 풀수 있습니다.)

{% highlight python %}
def binary_search(data, target):
    first = 0
    last = len(data)
    pos = -1

    while first <= last:
        midpoint = (first + last) / 2
        try:
            answer = data[midpoint]
        except IndexError:
            return -1

        if answer == target:
            pos = midpoint
            break

        if data[midpoint] >= target:
            last = midpoint - 1
        else:
            first = midpoint + 1
    return pos
{% endhighlight %}


# Sort

### Merge Sort

{% highlight python %}
def merge_sort(data):
    if len(data) > 1:
        mid = len(data) / 2
        left, right = data[:mid], data[mid:]
        merge_sort(left)
        merge_sort(right)

        i = j = k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                data[k] = left[i]
                i += 1
            else:
                data[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            data[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            data[k] = right[j]
            j += 1
            k += 1

    return data
{% endhighlight %}

### Quick Sort

{% highlight python %}
def quick_sort(data):
    less = []
    equal = []
    more = []

    if len(data) > 1:
        pivot = data[0]

        for v in data:
            if v < pivot:
                less.append(v)
            elif v == pivot:
                equal.append(v)
            elif v > pivot:
                more.append(v)

        return quick_sort(less) + equal + quick_sort(more)
    return data

{% endhighlight %}


### Shell Sort


{% highlight python %}
def shell_sort(data):
    N = len(data)
    sub_count = N / 2
    while sub_count > 0:
        gap_insertion_sort(data, sub_count)
        sub_count /= 2
    return data


def gap_insertion_sort(data, gap):
    N = len(data)
    for end_point in range(gap, N, gap):
        current_value = data[end_point]
        position = end_point

        while position - gap >= 0 and data[position - gap] > current_value:
            data[position] = data[position - gap]
            position -= gap

        data[position] = current_value
        # print data, 'position:%d current_value:%d, end_point:%d' % (position, current_value, end_point)
{% endhighlight %}

### Insertion Sort

{% highlight python %}
def insertion_sort(data):
    for end in range(1, len(data)):
        end_value = data[end]
        count = end
        while count > 0 and data[count - 1] >= end_value:
            data[count] = data[count-1]
            count -= 1
        data[count] = end_value
    return data

{% endhighlight %}

### Selection Sort

{% highlight python %}
def selection_sort(data):
    N = len(data)
    for end_point in range(N - 1, 0, -1):
        max_pos = 0
        for i in range(0, end_point + 1):
            if data[max_pos] < data[i]:
                max_pos = i
        data[end_point], data[max_pos] = data[max_pos], data[end_point]
    return data
{% endhighlight %}

### binary Insertion Sort

{% highlight python %}
def binary_insertion_sort(data):
    for i in xrange(1, len(data)):
        if data[i - 1] < data[i]:
            continue

        left = 0
        right = i
        while left < right:
            mid = (left + right) / 2

            if data[i] > data[mid]:
                left = mid + 1
            else:
                right = mid

        j = i
        while j > left:
            data[j - 1], data[j] = data[j], data[j - 1]
            j -= 1
    return data
{% endhighlight %}